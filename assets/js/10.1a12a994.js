(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{282:function(a,n,s){"use strict";s.r(n);var t=s(14),r=Object(t.a)({},(function(){var a=this,n=a._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[n("h1",{attrs:{id:"langnang-js-func"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#langnang-js-func"}},[a._v("#")]),a._v(" @langnang/js-func")]),a._v(" "),n("p",[n("strong",[a._v("安装")])]),a._v(" "),n("div",{staticClass:"language-sh extra-class"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[a._v("npm")]),a._v(" i @langnang/js-func\n")])])]),n("p",[n("strong",[a._v("使用")])]),a._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("import")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v(" function_name "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("from")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[a._v('"@langnang/js-func"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),n("p",[n("strong",[a._v("函数名称分类")])]),a._v(" "),n("ul",[n("li",[n("code",[a._v("array_*")]),a._v(": 数组类")]),a._v(" "),n("li",[n("code",[a._v("has_*")]),a._v(": 包含检测类")]),a._v(" "),n("li",[n("code",[a._v("is_*")]),a._v(": 检测类")]),a._v(" "),n("li",[n("code",[a._v("mock_*")]),a._v(": 模拟数据类")]),a._v(" "),n("li",[n("code",[a._v("random_*")]),a._v(": 随机类")]),a._v(" "),n("li",[n("code",[a._v("verify_*")]),a._v(": 校验类")]),a._v(" "),n("li",[n("code",[a._v("*_sort")]),a._v(": 排序类")])]),a._v(" "),n("p",[n("strong",[a._v("常用参数类型及功能")])]),a._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n * @description 常用参数类型及功能\n * @param {Array} array 数组\n * @param {Boolean} boolean 布尔值\n * @param {Number} number 数值\n * @param {Object} object 对象\n * @param {String} string 字符串\n * @param {RegExp} regexp 正则\n * @param {*} iteratee 迭代函数，如果迭代函数显式的返回 false ，迭代会提前退出。\n * @param {*} predicate 迭代断言函数，执行迭代时返回的结果若存在不一致则结束迭代\n */")]),a._v("\n")])])])])}),[],!1,null,null,null);n.default=r.exports}}]);